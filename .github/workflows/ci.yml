name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=snake_game --cov-report=xml --cov-report=json --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generate coverage badge
      if: matrix.python-version == '3.11' && github.ref == 'refs/heads/main'
      run: |
        poetry run python scripts/generate_badges.py
    
    - name: Update README badges
      if: matrix.python-version == '3.11' && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        if [[ `git status --porcelain` ]]; then
          git add README.md badges/
          git commit -m "Update badges [skip ci]" || exit 0
          git push
        fi

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install
    
    - name: Run isort
      run: poetry run isort --check-only --diff snake_game tests scripts
    
    - name: Run black
      run: poetry run black --check --diff snake_game tests scripts
    
    - name: Run flake8
      run: poetry run flake8 snake_game tests scripts
    
    - name: Run mypy
      run: poetry run mypy snake_game
      continue-on-error: true  # Allow mypy to fail for now

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      uses: securecodewarrior/github-action-bandit@v1
      with:
        path: "snake_game"
        level: "low"
        confidence: "low"
        exit_zero: true
